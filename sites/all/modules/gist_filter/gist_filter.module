<?php

/**
 * @file
 * Provides the ability to embed gists from Github.
 *
 * This module provides an input filter to add a gist (from Github) anywhere
 * input filters are accepted. You have the option of replacing the filter tag
 * with a link to the gist or embedding the gist itself.
 */

/**
 * Implementation of hook_theme().
 */
function gist_filter_theme() {
  return array(
    'gist_filter_code' => array(
      'variables' => array('file' => array()),
    ),
  );
}

/**
 * Implementation of hook_filter_info().
 */
function gist_filter_filter_info() {
  $filters['gist_filter'] = array(
    'title' => t('Gist filter (Github Gists)'),
    'description' => t('Substitutes [gist:xx] tags with the gist located at http://gist.github.com/xx.'),
    'process callback'  => 'gist_filter_gist_filter_process',
    'default settings' => array(
      'gist_filter_display_method' => 'embed',
    ),
    'settings callback' => 'gist_filter_gist_filter_settings',
    'tips callback' => 'gist_filter_filter_tips',
    'cache' => TRUE,
  );
  return $filters;
}

/**
 * Process callback for hook_filter_info().
 */
function gist_filter_gist_filter_process($text, $filter, $format) {
  $display = $filter->settings['gist_filter_display_method'];
  $callback = '_gist_display_' . $display;
  return preg_replace_callback('@\[gist\:(\d+)\:?(.*)?\]@', $callback, $text);
}

/**
 * Settings callback for gist_filter.
 */
function gist_filter_gist_filter_settings($form, $form_state, $filter, $format, $defaults) {
  $settings['gist_filter_display_method'] = array(
    '#title' => t('Gist display method'),
    '#type' => 'select',
    '#options' => array(
      'code' => t('Code tags'),
      'embed' => t('Embed'),
      'link' => t('Link'),
    ),
    '#default_value' => isset($filter->settings['gist_filter_display_method']) ? $filter->settings['gist_filter_display_method'] : $defaults['gist_filter_display_method'],
  );
  return $settings;
}

/**
 * Implements hook_filter_tips().
 */
function gist_filter_filter_tips($filter, $format, $long = FALSE) {
  $display = $filter->settings['gist_filter_display_method'];
  $action = $display == 'embed' ? t('embed the gist') : t('create a link to the gist');
  return t('Use [gist:####] where #### is your gist number to %action.', array('%action' => $action));
}

/**
 * Theme function to render the contents of a gist file in <code> tags.
 */
function theme_gist_filter_code($vars) {
  $file = $vars['file'];

  return '<div class="drupal-gist-file"><pre type="' . drupal_strtolower($file['language']) . '">' . check_plain($file['content']) . '</pre></div>';
}

/**
 * Replace the text with the content of the Gist, wrapped in <code> tags.
 */
function _gist_display_code($matches) {
  // Get the Gist from the Github API.
  $data = gist_filter_get_gist($matches[1]);

  $output = '';

  // If a file was specified, just render that one file.
  if (isset($matches[2]) && !empty($matches[2]) && isset($data['files'][$matches[2]])) {
    $output = theme('gist_filter_code', array(
      'file' => $data['files'][$matches[2]],
    ));
  }
  // Otherwise, render all files.
  else {
    foreach ($data['files'] as $file) {
      $output .= theme('gist_filter_code', array(
        'file' => $file,
      ));
    }
  }

  return $output;
}

/**
 * Replace the text with embedded script.
 */
function _gist_display_embed($matches) {
  $gist_url = 'http://gist.github.com/' . $matches[1];
  $gist_url = isset($matches[2]) && !empty($matches[2]) ? $gist_url . '.js?file=' . $matches[2] : $gist_url . '.js';

  // Also grab the content and display it in code tags (in case the user does not have JS).
  $output = '<noscript>' . _gist_display_code($matches) . '</noscript>';

  $output .= '<script src="' . $gist_url . '"></script>';
  return $output;
}

/**
 * Replace the text with a link.
 */
function _gist_display_link($matches) {
  $gist_url = 'http://gist.github.com/' . $matches[1];
  $gist_url = isset($matches[2]) && !empty($matches[2])? $gist_url . '#file_' . $matches[2] : $gist_url;
  return l($gist_url, $gist_url);
}

/**
 * Helper function to retrieve a Gist from the Github API.
 *
 * @param $id
 *   The ID of the Gist to grab.
 *
 * @return array
 *   The data from the Github API.
 */
function gist_filter_get_gist($id) {
  static $gists = array();

  // First, try the static cache.
  if (!isset($gists[$id])) {
    // Cache ID
    $cid = 'gist_filter:gist:' . $id;
    // Check if this gist is already in the cache
    $gist = cache_get($cid);

    if ($cached = cache_get($cid)) {
      $gist = $cached->data;
    }
    else {
      // Not available in the cache, so retrive the gist from Github
      $url = 'https://api.github.com/gists/' . $id;
      $response = drupal_http_request($url, array('headers' => array('Content-Type' => 'application/json')));
      $gist = drupal_json_decode($response->data);

      // Cache the gist until the next cache flush
      cache_set($cid, $gist, 'cache', CACHE_TEMPORARY);
    }

    $gists[$id] = $gist;
  }

  return $gists[$id];
}
