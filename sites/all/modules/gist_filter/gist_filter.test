<?php

/**
 * @file
 * Tests for the Gist Filter module.
 */

/**
 * Test class.
 */
class GistFilterTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';
  protected $user;
  protected $contentType;

  public static function getInfo() {
    return array(
      'name' => t('Gist Filter Tests'),
      'description' => t('Tests for the Gist Filter module.'),
      'group' => t('Input filters'),
    );
  }

  /**
   * Setup stuff.
   */
  public function setUp() {
    parent::setUp('gist_filter');

    // Create a content type to test the filters (with default format)
    $this->contentType = $this->drupalCreateContentType();

    // Create and log in our user.
    $this->user = $this->drupalCreateUser(array(
      'create ' . $this->contentType->type . ' content',
      'administer filters',
    ));
    $this->drupalLogin($this->user);
  }
  
  /**
   * Testing the embedded gist option.
   */
  function testEmbedStyle() {

    // Turn on our input filter and set the option to embed.
    $edit = array(
      'filters[gist_filter][status]' => 1,
      'filters[gist_filter][settings][gist_filter_display_method]' => 'embed',
    );
    $this->drupalPost('admin/config/content/formats/plain_text', $edit, t('Save configuration'));

    // Create a test node
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412]',
    );
    $result = $this->drupalPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw("Hello! ");
    $this->assertRaw('<script src="http://gist.github.com/865412.js"></script>');

  }

  /**
   * Testing the embedded gist option with a file parameter.
   */
  function testEmbedStyleWithFile() {

    // Turn on our input filter and set the option to embed.
    $edit = array(
      'filters[gist_filter][status]' => 1,
      'filters[gist_filter][settings][gist_filter_display_method]' => 'embed',
    );
    $this->drupalPost('admin/config/content/formats/plain_text', $edit, t('Save configuration'));

    // Create a test node
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412:php_file.php]',
    );
    $result = $this->drupalPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw("Hello! ");
    $this->assertRaw('<script src="http://gist.github.com/865412.js?file=php_file.php"></script>');

  }

  /**
   * Testing the link option. 
   */
  function testLinkStyle() {

    // Turn on our input filter and set the option to link.
    $edit = array(
      'filters[gist_filter][status]' => 1,
      'filters[gist_filter][settings][gist_filter_display_method]' => 'link',
    );
    $this->drupalPost('admin/config/content/formats/plain_text', $edit, t('Save configuration'));

    // Create a test node
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412]',
    );
    $result = $this->drupalPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw('Hello! <a href="http://gist.github.com/865412">http://gist.github.com/865412</a>');

  }

  /**
   * Testing the link option. 
   */
  function testLinkStyleWithFile() {

    // Turn on our input filter and set the option to link.
    $edit = array(
      'filters[gist_filter][status]' => 1,
      'filters[gist_filter][settings][gist_filter_display_method]' => 'link',
    );
    $this->drupalPost('admin/config/content/formats/plain_text', $edit, t('Save configuration'));

    // Create a test node
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412:php_file.php]',
    );
    $result = $this->drupalPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertRaw('Hello! <a href="http://gist.github.com/865412#file_php_file.php">http://gist.github.com/865412#file_php_file.php</a>');

  }

  /**
   * Testing the code tag option. 
   */
  function testCodeTagStyle() {

    // Turn on our input filter and set the option to link.
    $edit = array(
      'filters[gist_filter][status]' => 1,
      'filters[gist_filter][settings][gist_filter_display_method]' => 'code',
    );
    $this->drupalPost('admin/config/content/formats/plain_text', $edit, t('Save configuration'));

    // Create a test node
    $langcode = LANGUAGE_NONE;
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => 'Hello! [gist:865412]',
    );
    $result = $this->drupalPost('node/add/' . $this->contentType->type, $edit, t('Save'));
    $this->assertResponse(200);
    $this->assertPattern("@<pre type=\"php\">(.*)echo(.*)</pre>@sm");
    $this->assertPattern("@<pre type=\"ruby\">(.*)a = 1\nputs a</pre>@");

  }

  /**
   * Test that our API retrieval function caches calls to the Github API.
   */
  function testGistCachingTest() {
    // Make sure our cache is all cleared first.
    cache_clear_all('gist_filter:gist', 'cache', TRUE);
    $this->assertFalse(cache_get('gist_filter:gist:865412'));

    gist_filter_get_gist(865412);
    
    // Now the cache should be set.
    $cached = cache_get('gist_filter:gist:865412');
    $this->assertTrue($cached->data);
  }

}
